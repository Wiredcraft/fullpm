#!/bin/bash

# Description:

# This script remove unnecessary folders generated by Strongloop.
# Strongloop generate folders in like /var/lib/strong-pm/svc/1/work,
# usually only folder "current" and the folder "current" point to are needed.
# As time goes by, more and more folders were generated, this script
# remove those we do not need.

# changelog
# Feb 14, 2016


show_help() {
    echo 'Options:
    -s, --svc               Service ID (default: 1)
    -c, --count             Version kept (default: 2)
    -h, --help              Show this help
'

    echo 'List Services:
    The list enumerates the services we got by calling slc.
    To clean a specific service, use -s or --svc with the number you get from this list.
    For example: "slc_clean -s 1" will clean folders of Service ID 1.
'

    if hash slc 2>/dev/null; then
        slc ctl ls
    fi
}


get_options() {
    OPTION=$(getopt --options s:c:yh \
             --long svc:,count:,yes,help \
             -- "$@")

    # exit if the options have not properly been gathered
    if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

    # Note the quotes around '$OPTION': they are essential!
    eval set -- "$OPTION"

    while true ; do
        case "$1" in
            -s|--svc) SVC="$2" ; shift 2 ;;
            -c|--count) COUNT="$2" ; shift 2 ;;
            -y|--yes) YES=1 ; shift 1;;
            -h|--help) show_help ; exit 1 ;;
            --) shift; break;;
            *) echo "Internal error!" ; exit 1 ;;
        esac
    done
}
get_options "$@"

# Set the defaults if no data provided on the CLI
if [ -z "$SVC" ]; then
    SVC=1
fi

if [ -z "$COUNT" ]; then
    COUNT=2
fi

if [ -z "$YES" ]; then
    YES=0
fi

WORKDIR=/var/lib/strong-pm/svc/$SVC/work
if [ ! -d $WORKDIR ]; then
    echo "ERROR: '$WORKDIR' does not exists."
    exit 1;
fi
cd $WORKDIR

real_location=$(readlink current)

for folder in *; do
    if [ "$WORKDIR/$folder" != "$real_location" ]
    then
        # If folder have this patter, then try to remove this one.
        if [[ $folder =~ ^[a-z0-9]{40}.[0-9]{13}$ ]]; then

            # If command args does not have "-y/--yes", then
            # prompt and ask if deleting this folder each time.
            if [ "$YES" != 1 ]; then
                echo -n "Gonna remove $folder [y/N] "
                read confirm
                if [ "$confirm" == 'y' -o "$confirm" == 'Y' ]; then
                    rm -rf $folder
                    echo "removing..."
                else
                    echo "skipping..."
                fi
            else
                rm -rf $folder
            fi
        else
            echo "$folder is not a match, skipping..."
        fi
    fi
done
